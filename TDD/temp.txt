나는 지금 다음과 같은 시스템을 설계하고 있고, 그에 대한 논의와 구현을 이어서 계속하려고 해. 아래 내용을 전부 반영해줘:

[시스템 구조]

- 총 4개의 MCU(MCU1~MCU4)가 있고, 2x2 형태로 배치되어 있다.
  - [MCU1] [MCU2]
  - [MCU4] [MCU3]
- 각각은 2개의 브릿지를 통해 인접 MCU와 연결되어 있고, 이 브릿지들은 CAN 통신을 공유한다.
  - BridgeA: MCU1 ↔ MCU4
  - BridgeB: MCU1 ↔ MCU2
  - BridgeC: MCU2 ↔ MCU3
  - BridgeD: MCU3 ↔ MCU4

[Role Message 시스템 요약]

- MCU3 또는 MCU4만이 RoleMessage를 생성할 수 있다 (조건: is_primary(self_id) == true).
- RoleMessage는 다음 정보를 포함한다:
  - origin_id: 생성한 MCU의 ID
  - timestamp: 생성 시 증가하는 uint8_t 타입의 로컬 카운터
  - hop_count: 메시지 릴레이 횟수 (최대 3)
  - roles[4]: 각 MCU의 역할 상태 (ROLE_NONE, ROLE_SECONDARY, ROLE_PRIMARY)

- 메시지는 릴레이되며, 수신 MCU는 다음 기준으로 처리한다:
  - origin_id별로 가장 최근에 본 timestamp를 저장한다.
  - 새 메시지가 이전보다 오래된 경우 → 무시
  - 최신 메시지라면 roles[] 상태를 갱신하고, hop_count < 3 이면 전파

- timestamp는 메시지 처리 여부를 판단하는 기준 (중복, 최신 여부)
- hop_count는 메시지 전파 범위를 제한하여 네트워크 부하/무한 루프 방지

[기술적 질문과 결론 요약]

- timestamp만으로 중복 필터링과 메시지 덮어쓰기는 가능하지만,
- hop_count는 “메시지 릴레이 종료”를 위한 별도의 안전장치로 필요하다.
- 주기적으로 메시지를 생성하고, 생성자가 항상 살아 있다면 hop_count는 생략 가능하지만,
- 생성자가 멈출 수 있고, 네트워크가 루프 구조라면 hop_count는 반드시 필요하다.
- CAN 자체는 “이전값과 같으면 무시” 같은 내장 기능이 없고, 그런 처리는 어플리케이션 레벨에서 명시적으로 구현해야 한다.
- 최종적으로 hop_count는 네트워크에 쓸모 없는 메시지가 무한히 떠다니는 것을 방지하는 TTL 개념에 가깝다.

→ 이 내용을 바탕으로 더 이어서 질문할 예정이니, 지금까지 내용 전부 기억하고 이어서 대답해줘.